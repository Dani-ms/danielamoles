{"version":3,"sources":["webpack:///./src/pages/game.tsx","webpack:///./src/components/templates/game/game-template.tsx"],"names":["GameTemplate","props","state","empty","Array","fill","useState","currentPlayer","setCurrentPlayer","result","setResult","board","setBoard","checkDraw","every","item","useEffect","forEach","items","cell","resetGame","noContainment","noTopPadding","title","GAME_ROUTE","label","className","onClick","aria-haspopup","map","index","key","itemIndex","handleCellClick","role"],"mappings":"+JAEeA,UCWR,SAAsBC,EAAcC,GAKzC,IAAMC,EAAkBC,MAAM,GAAGC,KAAK,MALiB,EAMbC,mBAAS,KAA5CC,EANgD,KAMjCC,EANiC,OAO3BF,mBAAS,MAA9BG,EAPgD,KAOxCC,EAPwC,OAS7BJ,mBAASH,GAA5BQ,EATgD,KASzCC,EATyC,KAqDjDC,EAAY,WACZF,EAAMG,OAAM,SAAAC,GAAI,MAAa,KAATA,MACtBL,EAAU,OAIdM,qBA7BoB,WAEQ,CACxB,CAACL,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAE3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAE3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAGXM,SAAQ,SAAAC,GACpBA,EAAMJ,OAAM,SAAAK,GAAI,MAAa,MAATA,MAAeT,EAAU,MAE7CQ,EAAMJ,OAAM,SAAAK,GAAI,MAAa,MAATA,MAAeT,EAAU,SAEnDG,MASqB,CAACF,IACtB,IAAMS,EAAY,WAChBZ,EAAiB,KACjBI,EAAST,GACTO,EAAU,OASd,OACE,kBAAC,IAAD,CAAMW,eAAa,EAACC,cAAY,EAACC,MAAOC,IAAWC,QAChD,WACC,OACE,yBAAKC,UAAS,uBACZ,iCACE,wBAAIA,UAAS,UAAb,UAECjB,GACC,yBAAKiB,UAAS,6BACA,MAAXjB,EACC,kCAAQA,EAAR,YAEA,kCAAQA,EAAR,aAEF,wBAAIiB,UAAS,mBAAsB,IACnC,4BAAQA,UAAS,kBAAqBC,QAASP,EAAWQ,gBAAc,QAAxE,eAKJ,yBACEF,UAAS,+DAET,yBACEA,UAAS,8BACPjB,EAAS,YAAc,IADhB,gDAIRE,EAAMkB,KAAI,SAACd,EAAMe,GAAP,OACT,yBACEC,IAAKD,EACLJ,UAAS,QAAUX,EACnBY,QAAS,kBA/FL,SAACG,GAEnBrB,GAIiB,KAAjBE,EAAMmB,KAIVlB,EACED,EAAMkB,KAAI,SAACd,EAAMiB,GAAP,OACRA,IAAcF,EAAQvB,EAAgBQ,MAI1CP,EAAmC,MAAlBD,EAAwB,IAAM,MA+Ed0B,CAAgBH,IAAQI,KAAK,gBAC3CnB,e","file":"component---src-pages-game-tsx-f5f83e15f7df312ca55e.js","sourcesContent":["import { GameTemplate } from \"src/components/templates/game/game-template\"\r\n\r\nexport default GameTemplate\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Page } from \"src/components/routing/page/page\"\r\nimport { GAME_ROUTE } from \"./game-routes\"\r\nimport \"./game-template.scss\"\r\n\r\ntype Props = {\r\n  board: string\r\n  item: number\r\n}\r\ntype State = {\r\n  board?: String\r\n}\r\n\r\nexport function GameTemplate(props: Props, state: State) {\r\n  // const empty: Array<null | \"X\" | \"O\"> = Array(9).fill(null)\r\n  // const [board] = useState([empty])\r\n  \r\n\r\n  const empty: string[] = Array(9).fill(null)\r\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\")\r\n  const [result, setResult] = useState(null)\r\n\r\n  const [board, setBoard] = useState(empty)\r\n  const handleCellClick = (index: number) => {\r\n    //verifca se o card não tem item, se e diferente de elemento vazio e para no momento\r\n    if (result) {\r\n      //console.log('Jogo Finalizado');\r\n      return\r\n    }\r\n    if (board[index] === \"\") {\r\n      //console.log('Posição ocupada');\r\n      return\r\n    }\r\n    setBoard(\r\n      board.map((item, itemIndex) =>\r\n        itemIndex === index ? currentPlayer : item\r\n      )\r\n    ) //recriando o arrary\r\n\r\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\") //comparando os jogadores para trocar o O para X\r\n  }\r\n  //const [secondsLeft, setSecondsLeft] = useState(15)\r\n  //verifica quem ganhou\r\n  const checkResult = () => {\r\n    //ARRAY de possibilidade para ganhar\r\n    const possibleWaysToWin = [\r\n      [board[0], board[1], board[2]],\r\n      [board[3], board[4], board[5]],\r\n      [board[6], board[7], board[8]],\r\n\r\n      [board[0], board[3], board[6]],\r\n      [board[1], board[4], board[7]],\r\n      [board[2], board[5], board[8]],\r\n\r\n      [board[0], board[4], board[8]],\r\n      [board[2], board[4], board[6]],\r\n    ]\r\n\r\n    possibleWaysToWin.forEach(items => {\r\n      if (items.every(cell => cell === \"O\")) setResult(null) //setResult(\"O\")\r\n\r\n      if (items.every(cell => cell === \"X\")) setResult(null) //setResult(\"X\")\r\n    })\r\n    checkDraw()\r\n  }\r\n  //verificar empate\r\n  const checkDraw = () => {\r\n    if (board.every(item => item === \"\")) {\r\n      setResult(null) //setResult(\"E\")\r\n    }\r\n  }\r\n  //check result\r\n  useEffect(checkResult, [board])\r\n    const resetGame = () => {\r\n      setCurrentPlayer(\"O\")\r\n      setBoard(empty)\r\n      setResult(null)\r\n  }\r\n  // useEffect(() => {\r\n  //     if (secondsLeft > 0 && setCurrentPlayer.length > 0) {\r\n  //       const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1500)\r\n  //       return () => clearTimeout(timerId)\r\n  //     }\r\n  //   })\r\n\r\n  return (\r\n    <Page noContainment noTopPadding title={GAME_ROUTE.label}>\r\n      {() => {\r\n        return (\r\n          <div className={`game-page container`}>\r\n            <section>\r\n              <h1 className={`title `}> Game </h1>\r\n\r\n              {result && (\r\n                <div className={`mix-auto text-center mb-3`}>\r\n                  {result === \"E\" ? (\r\n                    <span> {result} Empate </span>\r\n                  ) : (\r\n                    <span> {result} venceu! </span>\r\n                  )}\r\n                  <h1 className={`winner-messages`}>{\"\"}</h1>\r\n                  <button className={`btn btn-warning`} onClick={resetGame} aria-haspopup=\"true\">\r\n                    Reset Game\r\n                  </button>\r\n                </div>\r\n              )}\r\n              <div\r\n                className={`game-container mix-auto text-center justify-content-center `}\r\n              >\r\n                <div\r\n                  className={`board-container pt-4 pb-4 ${\r\n                    result ? \"game-over\" : \"\"\r\n                  } mix-auto text-center justify-content-center`}\r\n                >\r\n                  {board.map((item, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`cell ${item}`}\r\n                      onClick={() => handleCellClick(index)} role=\"presentation\">\r\n                      {item}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        )\r\n      }}\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}